// <auto-generated />
using System;
using ECommerceNet.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerceNet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ECommerceNet.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UserId");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ECommerceNet.Models.Comments", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProductId");

                    b.Property<int>("CommentId");

                    b.Property<string>("Image");

                    b.Property<int>("Rating");

                    b.Property<string>("Text");

                    b.HasKey("UserId", "ProductId");

                    b.HasAlternateKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ECommerceNet.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<decimal?>("Price");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ECommerceNet.Models.PurchaseHistory", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("PurchaseId");

                    b.Property<int>("Quantity");

                    b.Property<int>("Total");

                    b.HasKey("UserId", "ProductId");

                    b.HasAlternateKey("PurchaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseHistory");
                });

            modelBuilder.Entity("ECommerceNet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("ShippingAddress");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerceNet.Models.Cart", b =>
                {
                    b.HasOne("ECommerceNet.Models.Product", "ProductName")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceNet.Models.User", "UserName")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ECommerceNet.Models.Comments", b =>
                {
                    b.HasOne("ECommerceNet.Models.Product", "ProductName")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceNet.Models.User", "UserName")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ECommerceNet.Models.PurchaseHistory", b =>
                {
                    b.HasOne("ECommerceNet.Models.Product", "ProductName")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceNet.Models.User", "UserName")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
